/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import mibapplikation.Validation;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author strom
 */
public class JfAdminManageAgent extends javax.swing.JFrame {

    private InfDB idb;

    /**
     * Creates new form WindowAlienChangePw
     */
    public JfAdminManageAgent(InfDB idb) {
        initComponents();
        this.idb = idb;
        txtaShowAgentInfo.setEditable(false);
        listAreas();
        jpErrorMessageBox.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBackground = new javax.swing.JPanel();
        btnShowInfo = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        lblTitel = new javax.swing.JLabel();
        lblAgentInfo = new javax.swing.JLabel();
        txtfAgentInfoInput = new javax.swing.JTextField();
        spShowInfoBox = new javax.swing.JScrollPane();
        txtaShowAgentInfo = new javax.swing.JTextArea();
        lblUpdateName = new javax.swing.JLabel();
        lblUpdatePhone = new javax.swing.JLabel();
        lblUpdatePw = new javax.swing.JLabel();
        lblUpdateDate = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        cbListAreas = new javax.swing.JComboBox<>();
        lblUpdateArea = new javax.swing.JLabel();
        txtfNameInput = new javax.swing.JTextField();
        txtfPhoneInput = new javax.swing.JTextField();
        txtfPasswordInput = new javax.swing.JTextField();
        txtfDateInput = new javax.swing.JTextField();
        lblDeleteMessage = new javax.swing.JLabel();
        lblTitleUpdate = new javax.swing.JLabel();
        lblInfoMessage = new javax.swing.JLabel();
        lblAgentDelete = new javax.swing.JLabel();
        txtfAgentDeleteInput = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jpErrorMessageBox = new javax.swing.JPanel();
        spListErrorInfo = new javax.swing.JScrollPane();
        txtaPrintErrorInfo = new javax.swing.JTextArea();
        spTitleErrorInfo = new javax.swing.JScrollPane();
        txtaTitleErrorInfo = new javax.swing.JTextArea();
        btnChangeErrorInfo = new javax.swing.JButton();
        lblAgentUpdate = new javax.swing.JLabel();
        txtfAgentUpdateInput = new javax.swing.JTextField();
        lblTitleDelete = new javax.swing.JLabel();
        lblTitleShowInfo = new javax.swing.JLabel();
        lblUpdateMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Galaxal");
        setBackground(new java.awt.Color(40, 40, 40));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/astronomy.png")).getImage());
        setLocationByPlatform(true);
        setResizable(false);

        jpBackground.setBackground(new java.awt.Color(40, 40, 40));

        btnShowInfo.setText("VISA INFO");
        btnShowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInfoActionPerformed(evt);
            }
        });

        btnMenu.setText("MENY");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        lblTitel.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lblTitel.setForeground(new java.awt.Color(255, 255, 255));
        lblTitel.setText("Se och ändra information om en agent");

        lblAgentInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblAgentInfo.setText("Ange en agents namn eller id:");

        spShowInfoBox.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtaShowAgentInfo.setBackground(new java.awt.Color(79, 79, 79));
        txtaShowAgentInfo.setColumns(20);
        txtaShowAgentInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtaShowAgentInfo.setRows(5);
        spShowInfoBox.setViewportView(txtaShowAgentInfo);

        lblUpdateName.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateName.setText("Uppdatera namn:");

        lblUpdatePhone.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdatePhone.setText("Uppdatera telefonnummer:");

        lblUpdatePw.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdatePw.setText("Uppdatera lösenord:");

        lblUpdateDate.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateDate.setText("Uppdatera anställningsdatum:");

        btnUpdate.setText("UPPDATERA");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cbListAreas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----" }));

        lblUpdateArea.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateArea.setText("Uppdatera område: ");

        lblDeleteMessage.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblDeleteMessage.setForeground(new java.awt.Color(255, 50, 50));
        lblDeleteMessage.setText(" ");

        lblTitleUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleUpdate.setText("Uppdatera information");

        lblInfoMessage.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblInfoMessage.setForeground(new java.awt.Color(255, 50, 50));
        lblInfoMessage.setText(" ");

        lblAgentDelete.setForeground(new java.awt.Color(255, 255, 255));
        lblAgentDelete.setText("Ange en agents namn eller id:");

        txtfAgentDeleteInput.setColumns(6);

        btnDelete.setText("TA BORT");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jpErrorMessageBox.setBackground(new java.awt.Color(79, 79, 79));
        jpErrorMessageBox.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 50, 50), 2));

        spListErrorInfo.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtaPrintErrorInfo.setBackground(new java.awt.Color(40, 40, 40));
        txtaPrintErrorInfo.setColumns(20);
        txtaPrintErrorInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtaPrintErrorInfo.setRows(5);
        txtaPrintErrorInfo.setFocusable(false);
        txtaPrintErrorInfo.setRequestFocusEnabled(false);
        spListErrorInfo.setViewportView(txtaPrintErrorInfo);

        spTitleErrorInfo.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        spTitleErrorInfo.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        txtaTitleErrorInfo.setBackground(new java.awt.Color(40, 40, 40));
        txtaTitleErrorInfo.setColumns(20);
        txtaTitleErrorInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtaTitleErrorInfo.setRows(5);
        txtaTitleErrorInfo.setText("Följande område behöver tilldelas \nen ny områdeschef innan agenten\nkan tas bort");
        txtaTitleErrorInfo.setFocusable(false);
        txtaTitleErrorInfo.setRequestFocusEnabled(false);
        spTitleErrorInfo.setViewportView(txtaTitleErrorInfo);

        btnChangeErrorInfo.setText("Ändra områdeschef");
        btnChangeErrorInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeErrorInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpErrorMessageBoxLayout = new javax.swing.GroupLayout(jpErrorMessageBox);
        jpErrorMessageBox.setLayout(jpErrorMessageBoxLayout);
        jpErrorMessageBoxLayout.setHorizontalGroup(
            jpErrorMessageBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpErrorMessageBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpErrorMessageBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnChangeErrorInfo)
                    .addComponent(spTitleErrorInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(spListErrorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpErrorMessageBoxLayout.setVerticalGroup(
            jpErrorMessageBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpErrorMessageBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spTitleErrorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spListErrorInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnChangeErrorInfo)
                .addGap(18, 18, 18))
        );

        lblAgentUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblAgentUpdate.setText("Ange en agents namn eller id:");

        lblTitleDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleDelete.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleDelete.setText("Ta bort agent");

        lblTitleShowInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleShowInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleShowInfo.setText("Visa information");

        lblUpdateMessage.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblUpdateMessage.setForeground(new java.awt.Color(255, 50, 50));
        lblUpdateMessage.setText(" ");

        javax.swing.GroupLayout jpBackgroundLayout = new javax.swing.GroupLayout(jpBackground);
        jpBackground.setLayout(jpBackgroundLayout);
        jpBackgroundLayout.setHorizontalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBackgroundLayout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addComponent(lblTitleShowInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addComponent(lblTitel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnMenu)
                                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                                        .addComponent(lblAgentInfo)
                                        .addGap(18, 18, 18)
                                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnShowInfo)
                                            .addComponent(txtfAgentInfoInput, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblUpdateDate)
                                                    .addComponent(lblUpdatePw)
                                                    .addComponent(lblUpdatePhone)
                                                    .addComponent(lblUpdateName)
                                                    .addComponent(lblAgentUpdate))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbListAreas, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtfDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtfPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtfPhoneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtfNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(txtfAgentUpdateInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btnUpdate)))
                                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblTitleDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblUpdateArea)
                                                    .addComponent(lblUpdateMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblTitleUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblDeleteMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                                                .addComponent(lblAgentDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(btnDelete)
                                                    .addComponent(txtfAgentDeleteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                .addGap(84, 84, 84))
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addComponent(lblInfoMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(spShowInfoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jpErrorMessageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(157, 157, 157))))
        );
        jpBackgroundLayout.setVerticalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(lblTitel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTitleShowInfo)
                .addGap(5, 5, 5)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAgentInfo)
                            .addComponent(txtfAgentInfoInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnShowInfo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInfoMessage)
                        .addGap(29, 29, 29)
                        .addComponent(lblTitleUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfAgentUpdateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAgentUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdateName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfPhoneInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdatePhone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfPasswordInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdatePw))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfDateInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdateDate)))
                    .addComponent(spShowInfoBox, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(lblUpdateArea))
                            .addComponent(cbListAreas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUpdateMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblTitleDelete)
                        .addGap(6, 6, 6)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAgentDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfAgentDeleteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDeleteMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpErrorMessageBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(btnMenu)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 776, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeErrorInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeErrorInfoActionPerformed
        // TODO add your handling code here:
        if (btnChangeErrorInfo.getText().equals("Ändra områdeschef")) {
            new JfAdminManageAuthority(idb).setVisible(true);
        }
        if (btnChangeErrorInfo.getText().equals("Ändra info om alien")) {
            new JfAdminManageAlien(idb).setVisible(true);
        }
        if (btnChangeErrorInfo.getText().equals("Ändra kontorschef")) {
            new JfAdminManageAuthority(idb).setVisible(true);
        }
    }//GEN-LAST:event_btnChangeErrorInfoActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        lblInfoMessage.setText(" ");
        lblUpdateMessage.setText(" ");
        lblDeleteMessage.setText(" ");
        lblDeleteMessage.setForeground(new Color(255,50,50));
        jpErrorMessageBox.setVisible(false);

        if (Validation.validationTxt(txtfAgentDeleteInput, lblDeleteMessage, "Ange agentnamn eller id")) {
            if (checkAgentDoublet()) {
                lblDeleteMessage.setText("Det finns mer än en agent med detta namn, vänligen ange id");

            } else if (getAgentId().equals("")) {
                lblDeleteMessage.setText("Agentnamnet eller id:t finns inte registrerat");

            } else if (checkAgentIsContact()) {
                jpErrorMessageBox.setVisible(true);
            } else if (checkAgentIsAreaChief()) {
                jpErrorMessageBox.setVisible(true);
            } else if (checkAgentIsHeadChief()){
                jpErrorMessageBox.setVisible(true);
            }else{
                deleteAgent();

                lblDeleteMessage.setForeground(new Color(50,255,50));
                lblDeleteMessage.setText("Agenten har tagits bort!");

            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //spara ändringar knappen
        lblInfoMessage.setText(" ");
        lblUpdateMessage.setText(" ");
        lblDeleteMessage.setText(" ");
        lblUpdateMessage.setForeground(new Color(255,50,50));
        int loops = 0;
        if (Validation.validationTxt(txtfAgentUpdateInput, lblUpdateMessage, "Ange ett namn eller id för en agent")) {
            if (txtfNameInput.getText().isEmpty() && txtfPhoneInput.getText().isEmpty() && txtfPasswordInput.getText().isEmpty()
                && txtfDateInput.getText().isEmpty() && cbListAreas.getSelectedItem().equals("-----")) {
                lblUpdateMessage.setText("Du måste välja minst en sak att uppdatera för den valda agenten");
            } else {
                try {
                    String qAgentId = "SELECT agent_id FROM agent WHERE namn = '" + txtfAgentUpdateInput.getText() + "' OR agent_id = '" + txtfAgentUpdateInput.getText() + "'";
                    ArrayList<String> agentIdList = idb.fetchColumn(qAgentId);
                    String agentId = idb.fetchSingle(qAgentId);

                    for (String element : agentIdList) {
                        loops++;
                    }

                    if (loops > 1) {
                        lblUpdateMessage.setText("Det finns mer än en agent med detta namn, var vänligen ange ID");

                    } else if (agentId == null) {
                        lblUpdateMessage.setText("Agentens namn finns inte registrerat");
                    } else {
                        if (!txtfNameInput.getText().isEmpty()) {
                            setAgentName(agentId);
                        }
                        if (!txtfPhoneInput.getText().isEmpty()) {
                            setPhone(agentId);
                        }
                        if (!txtfPasswordInput.getText().isEmpty()) {
                            setPassword(agentId);
                        }
                        if (!txtfDateInput.getText().isEmpty()) {
                            setDate(agentId);
                        }
                        if (!cbListAreas.getSelectedItem().equals("-----")) {
                            setAgentLocation(agentId);
                        }
                        txtfAgentInfoInput.setText(agentId);
                        btnShowInfo.doClick();
                    }
                } catch (InfException ex) {
                    System.out.println("Databasfel" + ex.getMessage());
                } catch (Exception ex) {
                    System.out.println("Random fel" + ex.getMessage());
                }
              
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        //dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnShowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInfoActionPerformed
        //visa info knappen
        lblInfoMessage.setText(" ");
        lblUpdateMessage.setText(" ");
        lblDeleteMessage.setText(" ");
        txtaShowAgentInfo.setText("");
        int loops = 0;
        if (Validation.validationTxt(txtfAgentInfoInput, lblInfoMessage, "Ange ett namn eller id för en agent")) {
            try {
                String qAgentId = "SELECT agent_id FROM agent WHERE namn = '" + txtfAgentInfoInput.getText() + "' OR agent_id = '" + txtfAgentInfoInput.getText() + "'";
                ArrayList<String> agentIdList = idb.fetchColumn(qAgentId);
                String agentId = idb.fetchSingle(qAgentId);

                for (String element : agentIdList) {
                    loops++;
                }

                if (loops > 1) {
                    lblInfoMessage.setText("Det finns mer än en agent med detta namn, var vänligen ange ID");

                }
                if (agentId == null) {
                    lblInfoMessage.setText("Agentens namn finns inte registrerat");
                } else {
                    listAgentInfo(agentId);
                }
            } catch (InfException ex) {
                System.out.println("Databasfel" + ex.getMessage());
            } catch (Exception ex) {
                System.out.println("Random fel" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnShowInfoActionPerformed

    private void correctValues() {

        lblUpdateMessage.setForeground(new Color(50,255,50));
        lblUpdateMessage.setText("Dina ändringar är sparade");

    }

    private void listAreas() {
        try {
            String query = "Select benamning from omrade";
            ArrayList<String> result = idb.fetchColumn(query);

            for (String element : result) {
                cbListAreas.addItem(element);

            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void listAgentInfo(String agentId) {
        try {
            txtaShowAgentInfo.append("Agent id:\t" + agentId + "\n");

            String qAgentInfo = "SELECT namn, telefon, anstallningsdatum FROM agent WHERE agent_id = '" + agentId + "'";
            HashMap<String, String> agentInfo = idb.fetchRow(qAgentInfo);
            txtaShowAgentInfo.append("Namn:\t" + agentInfo.get("namn") + "\n");
            txtaShowAgentInfo.append("Telefon:\t" + agentInfo.get("telefon") + "\n");
            txtaShowAgentInfo.append("Anst.datum:\t" + agentInfo.get("anstallningsdatum") + "\n");

            String qAgentArea = "SELECT o.benamning FROM omrade o JOIN agent a ON o.omrades_id= a.omrade WHERE agent_id ='" + agentId + "'";
            String agentArea = idb.fetchSingle(qAgentArea);
            txtaShowAgentInfo.append("Område:\t" + agentArea);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());

        }

    }

    private void setAgentName(String agentId) {
        try {
            if (Validation.validationTxtNrOfChar(txtfNameInput, lblUpdateMessage, 20, "Namnet får vara max 20 tecken")) {
                String qName = "UPDATE agent SET namn = '" + txtfNameInput.getText() + "' WHERE agent_id = '" + agentId + "'";
                idb.update(qName);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setPhone(String agentId) {
        try {
            if (Validation.validationTxtPhone(txtfPhoneInput, lblUpdateMessage)) {
                String qPhone = "UPDATE agent SET telefon = '" + txtfPhoneInput.getText() + "' WHERE agent_id = '" + agentId + "'";
                idb.update(qPhone);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setPassword(String agentId) {
        try {
            if (Validation.validationTxtNrOfChar(txtfPasswordInput, lblUpdateMessage, 6, "Lösenordet får max vara 6 tecken")) {
                String qPassword = "UPDATE agent SET losenord = '" + txtfPasswordInput.getText() + "' WHERE agent_id = '" + agentId + "'";
                idb.update(qPassword);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setDate(String agentId) {
        try {
            if (Validation.validationTxtDate(txtfDateInput, lblUpdateMessage)) {
                String qDate = "UPDATE agent SET anstallningsdatum ='" + txtfDateInput.getText() + "' WHERE agent_id='" + agentId + "'";
                idb.update(qDate);
                correctValues();
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setAgentLocation(String agentId) {
        try {
            String qLocationId = "SElECT omrades_id from omrade WHERE benamning = '" + cbListAreas.getSelectedItem() + "'";
            String locationId = idb.fetchSingle(qLocationId);

            String qLocation = "Update agent SET omrade ='" + locationId + "' WHERE agent_id = '" + agentId + "'";
            idb.update(qLocation);
            correctValues();

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }
    private String getAgentId() {
        String agentId = "";
        try {
            String qAgentId = "SELECT agent_id FROM agent WHERE namn = '" + txtfAgentDeleteInput.getText() + "' OR agent_id = '" + txtfAgentDeleteInput.getText() + "'";
            String resultAgentId = idb.fetchSingle(qAgentId);

            if (resultAgentId != null) {
                agentId = resultAgentId;
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

        return agentId;
    }

    private boolean checkAgentDoublet() {
        int loops = 0;
        boolean isDoublet = false;
        try {
            String qAgentId = "SELECT agent_id FROM agent WHERE namn = '" + txtfAgentDeleteInput.getText() + "' OR agent_id = '" + txtfAgentDeleteInput.getText() + "'";
            ArrayList<String> agentIdList = idb.fetchColumn(qAgentId);

            for (String element : agentIdList) {
                loops++;
            }
            if (loops > 1) {
                isDoublet = true;
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return isDoublet;

    }

    private boolean checkAgentIsContact() {

        txtaPrintErrorInfo.setText("");
        String agentId = getAgentId();
        boolean isContactAgent = false;

        try {
            String qAlien = "SELECT alien_id, namn FROM alien WHERE ansvarig_agent = '" + agentId + "'";
            ArrayList<HashMap<String, String>> result = idb.fetchRows(qAlien);

            if (result.size() > 0) {

                txtaTitleErrorInfo.setText("Följande aliens behöver tilldelas\n"
                        + "ny kontaktperson innan \n"
                        + "agenten kan tas bort");
                for (HashMap<String, String> element : result) {
                    txtaPrintErrorInfo.append(" • " + element.get("namn") + " ("+ element.get("alien_id") + ")\n");
                }
                btnChangeErrorInfo.setText("Ändra info om alien");

                isContactAgent = true;
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return isContactAgent;
    }

    private boolean checkAgentIsAreaChief() {
        txtaPrintErrorInfo.setText("");
        String agentId = getAgentId();
        boolean isAreaChief = false;

        try {
            String qOmrade = "SELECT benamning FROM omrade o\n"
                    + "JOIN omradeschef oc ON o.omrades_id = oc.omrade\n"
                    + "WHERE agent_id = '" + agentId + "'";
            String result = idb.fetchSingle(qOmrade);

            if (result != null) {

                txtaTitleErrorInfo.setText("Följande område behöver tilldelas \n"
                        + "en ny områdeschef innan agenten\n"
                        + "kan tas bort");
                txtaPrintErrorInfo.append(" • "  + result);
                btnChangeErrorInfo.setText("Ändra områdeschef");

                isAreaChief = true;
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return isAreaChief;
    }
    
     private boolean checkAgentIsHeadChief() {
        txtaPrintErrorInfo.setText("");
        String agentId = getAgentId();
        boolean isHeadChief = false;

        try {
            String qHeadChief = "SELECT agent_id FROM kontorschef \n"
                    + "WHERE agent_id = '" + agentId + "'";
            String result = idb.fetchSingle(qHeadChief);

            if (result != null) {

                txtaTitleErrorInfo.setText("Ny kontorschef behöver tilldelas \n"
                        + "innan agenten kan tas bort");
                btnChangeErrorInfo.setText("Ändra kontorschef");

                isHeadChief = true;
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return isHeadChief;
    }

    private void deleteAgent() {
        String agentId = getAgentId();

        try {
            String qVehicle = "DELETE FROM innehar_fordon WHERE agent_id = '" + agentId + "'";
            idb.delete(qVehicle);
            String qEquipment = "DELETE FROM innehar_utrustning WHERE agent_id = '" + agentId + "'";
            idb.delete(qEquipment);
            String qAreaChief = "DELETE FROM omradeschef WHERE agent_id = '" + agentId + "'";
            idb.delete(qAreaChief);
            String qHeadChief = "DELETE FROM kontorschef WHERE agent_id = '" + agentId + "'";
            idb.delete(qHeadChief);
            String qFieldAgent = "DELETE FROM faltagent WHERE agent_id = '" + agentId + "'";
            idb.delete(qFieldAgent);
            String qAgent = "DELETE FROM agent WHERE agent_id = '" + agentId + "'";
            idb.delete(qAgent);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeErrorInfo;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnShowInfo;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbListAreas;
    private javax.swing.JPanel jpBackground;
    private javax.swing.JPanel jpErrorMessageBox;
    private javax.swing.JLabel lblAgentDelete;
    private javax.swing.JLabel lblAgentInfo;
    private javax.swing.JLabel lblAgentUpdate;
    private javax.swing.JLabel lblDeleteMessage;
    private javax.swing.JLabel lblInfoMessage;
    private javax.swing.JLabel lblTitel;
    private javax.swing.JLabel lblTitleDelete;
    private javax.swing.JLabel lblTitleShowInfo;
    private javax.swing.JLabel lblTitleUpdate;
    private javax.swing.JLabel lblUpdateArea;
    private javax.swing.JLabel lblUpdateDate;
    private javax.swing.JLabel lblUpdateMessage;
    private javax.swing.JLabel lblUpdateName;
    private javax.swing.JLabel lblUpdatePhone;
    private javax.swing.JLabel lblUpdatePw;
    private javax.swing.JScrollPane spListErrorInfo;
    private javax.swing.JScrollPane spShowInfoBox;
    private javax.swing.JScrollPane spTitleErrorInfo;
    private javax.swing.JTextArea txtaPrintErrorInfo;
    private javax.swing.JTextArea txtaShowAgentInfo;
    private javax.swing.JTextArea txtaTitleErrorInfo;
    private javax.swing.JTextField txtfAgentDeleteInput;
    private javax.swing.JTextField txtfAgentInfoInput;
    private javax.swing.JTextField txtfAgentUpdateInput;
    private javax.swing.JTextField txtfDateInput;
    private javax.swing.JTextField txtfNameInput;
    private javax.swing.JTextField txtfPasswordInput;
    private javax.swing.JTextField txtfPhoneInput;
    // End of variables declaration//GEN-END:variables
}
