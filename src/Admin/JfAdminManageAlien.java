/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Admin;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import mibapplikation.Alien;
import mibapplikation.Validation;
import org.apache.commons.lang3.StringUtils;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author strom
 */
public class JfAdminManageAlien extends javax.swing.JFrame {

    private String alienId;
    private InfDB idb;

    /**
     * Creates new form JfAdminRegAgent for Admin
     */
    public JfAdminManageAlien(InfDB idb) {
        initComponents();
        this.idb = idb;
        txtaPrintAlienInfo.setEditable(false);
        hideText();
        listAgents();
        listLocations();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBackground = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblMessageChange = new javax.swing.JLabel();
        btnMenu = new javax.swing.JButton();
        lblMessageInfo = new javax.swing.JLabel();
        lblTitleShowInfo = new javax.swing.JLabel();
        btnShowInfo = new javax.swing.JButton();
        jsPrintInfo = new javax.swing.JScrollPane();
        txtaPrintAlienInfo = new javax.swing.JTextArea();
        lblMessageDelete = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        txtfShowAlienInput = new javax.swing.JTextField();
        lblDeleteAlien = new javax.swing.JLabel();
        lblTitleDelete = new javax.swing.JLabel();
        lblRaceSpecial = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        txtfRaceSpecial = new javax.swing.JTextField();
        lblAlienRace = new javax.swing.JLabel();
        lblAgent = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        lblPw = new javax.swing.JLabel();
        cbListRace = new javax.swing.JComboBox<>();
        cbListAgents = new javax.swing.JComboBox<>();
        cbListLocations = new javax.swing.JComboBox<>();
        txtfPwInput = new javax.swing.JTextField();
        lblAlienPhone = new javax.swing.JLabel();
        txtfPhoneInput = new javax.swing.JTextField();
        lblAlienName = new javax.swing.JLabel();
        txtfNameInput = new javax.swing.JTextField();
        lblTitelUpdate = new javax.swing.JLabel();
        lblMessageInput = new javax.swing.JLabel();
        txtfAlienInputDelete = new javax.swing.JTextField();
        lblUpdateAlien = new javax.swing.JLabel();
        txtfAlienInputChange = new javax.swing.JTextField();
        lblShowInfoAlien = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Galaxal");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/astronomy.png")).getImage());
        setLocationByPlatform(true);
        setResizable(false);

        jpBackground.setBackground(new java.awt.Color(40, 40, 40));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Korrigera alien");

        lblMessageChange.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageChange.setForeground(new java.awt.Color(255, 50, 50));
        lblMessageChange.setText(" ");

        btnMenu.setText("MENY");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        lblMessageInfo.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageInfo.setForeground(new java.awt.Color(255, 50, 50));
        lblMessageInfo.setText(" ");

        lblTitleShowInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleShowInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleShowInfo.setText("Se info om Alien");

        btnShowInfo.setText("VISA INFO");
        btnShowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInfoActionPerformed(evt);
            }
        });

        jsPrintInfo.setForeground(new java.awt.Color(255, 255, 255));
        jsPrintInfo.setRequestFocusEnabled(false);

        txtaPrintAlienInfo.setBackground(new java.awt.Color(79, 79, 79));
        txtaPrintAlienInfo.setColumns(20);
        txtaPrintAlienInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtaPrintAlienInfo.setRows(5);
        txtaPrintAlienInfo.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtaPrintAlienInfo.setEnabled(false);
        txtaPrintAlienInfo.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        jsPrintInfo.setViewportView(txtaPrintAlienInfo);

        lblMessageDelete.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageDelete.setForeground(new java.awt.Color(255, 50, 50));
        lblMessageDelete.setText(" ");

        btnDelete.setText("TA BORT");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtfShowAlienInput.setColumns(6);

        lblDeleteAlien.setForeground(new java.awt.Color(255, 255, 255));
        lblDeleteAlien.setText("Ange aliens namn eller id:");

        lblTitleDelete.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleDelete.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleDelete.setText("Ta bort alien");

        lblRaceSpecial.setForeground(new java.awt.Color(255, 255, 255));
        lblRaceSpecial.setText("xxxx");

        btnUpdate.setText("UPPDATERA");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        lblAlienRace.setForeground(new java.awt.Color(255, 255, 255));
        lblAlienRace.setText("Uppdatera rastillhörighet:");

        lblAgent.setForeground(new java.awt.Color(255, 255, 255));
        lblAgent.setText("Uppdatera ansvarig agent:");

        lblLocation.setForeground(new java.awt.Color(255, 255, 255));
        lblLocation.setText("Uppdatera plats:");

        lblPw.setForeground(new java.awt.Color(255, 255, 255));
        lblPw.setText("Uppdatera lösenord: ");

        cbListRace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "Boglodite", "Squid", "Worm", "<Oidentifierad>" }));
        cbListRace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListRaceActionPerformed(evt);
            }
        });

        cbListAgents.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----" }));

        cbListLocations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----" }));

        txtfPwInput.setColumns(6);

        lblAlienPhone.setForeground(new java.awt.Color(255, 255, 255));
        lblAlienPhone.setText("Uppdatera telefonnummer:");

        txtfPhoneInput.setColumns(6);

        lblAlienName.setForeground(new java.awt.Color(255, 255, 255));
        lblAlienName.setText("Uppdatera namn:");

        txtfNameInput.setColumns(6);

        lblTitelUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitelUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblTitelUpdate.setText("Ändra information om en alien");

        lblMessageInput.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageInput.setForeground(new java.awt.Color(255, 0, 0));

        txtfAlienInputDelete.setColumns(6);

        lblUpdateAlien.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateAlien.setText("Ange aliens namn eller id:");

        txtfAlienInputChange.setColumns(6);

        lblShowInfoAlien.setForeground(new java.awt.Color(255, 255, 255));
        lblShowInfoAlien.setText("Ange aliens namn eller id:");

        javax.swing.GroupLayout jpBackgroundLayout = new javax.swing.GroupLayout(jpBackground);
        jpBackground.setLayout(jpBackgroundLayout);
        jpBackgroundLayout.setHorizontalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBackgroundLayout.createSequentialGroup()
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnMenu))
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addGap(0, 97, Short.MAX_VALUE)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitleDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDeleteAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfAlienInputDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jsPrintInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitleShowInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblShowInfoAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnShowInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessageInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfShowAlienInput, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessageDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblUpdateAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitelUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblMessageInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtfAlienInputChange, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblAlienName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfPhoneInput, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPw, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfPwInput, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtfNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAgent)
                    .addComponent(cbListAgents, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbListLocations, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAlienRace, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbListRace, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtfRaceSpecial, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRaceSpecial)))
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessageChange, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAlienPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77))
        );
        jpBackgroundLayout.setVerticalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBackgroundLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addComponent(lblTitleShowInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblShowInfoAlien))
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addComponent(txtfShowAlienInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnShowInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblMessageInfo)))
                        .addGap(28, 28, 28)
                        .addComponent(jsPrintInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTitleDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblDeleteAlien)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfAlienInputDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDelete)
                            .addComponent(btnUpdate)))
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblTitelUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblUpdateAlien)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfAlienInputChange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMessageInput, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAlienName, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAlienPhone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfPhoneInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPw)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtfPwInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbListLocations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblAgent)
                        .addGap(6, 6, 6)
                        .addComponent(cbListAgents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAlienRace, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRaceSpecial))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbListRace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfRaceSpecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMessageDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMessageChange, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(btnMenu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   private void hideText() {
        lblRaceSpecial.setVisible(false);
        txtfRaceSpecial.setVisible(false);
    }

    private void showText() {
        lblRaceSpecial.setVisible(true);
        txtfRaceSpecial.setVisible(true);
    }

    private void correctValues() {

        lblMessageChange.setForeground(new Color(50,255,50));
        lblMessageChange.setText("Dina ändringar är sparade");

    }

    private void listLocations() {

        try {
            String query = "SELECT benamning FROM plats";
            ArrayList<String> listLocations = idb.fetchColumn(query);

            for (String element : listLocations) {

                cbListLocations.addItem(element);

            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void listAgents() {

        try {
            String query = "SELECT agent_id, namn, benamning FROM agent\n"
                    + "JOIN Omrade o on Agent.Omrade = o.Omrades_ID\n"
                    + "ORDER BY namn, benamning";
            ArrayList<HashMap<String, String>> listLocations = idb.fetchRows(query);

            for (HashMap<String, String> element : listLocations) {

                cbListAgents.addItem(element.get("namn") + " (" + element.get("agent_id") + ") " + element.get("benamning"));

            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setAlienName(String alienId) {

        try {
            if (Validation.validationTxtNrOfChar(txtfNameInput, lblMessageChange, 20, "Namnet får vara max 20 tecken")) {
                String qName = "UPDATE alien SET namn = '" + txtfNameInput.getText() + "' WHERE alien_id = '" + alienId + "'";
                idb.update(qName);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setPhone(String alienId) {
        try {
            if (Validation.validationTxtPhone(txtfPhoneInput, lblMessageChange)) {
                String qPhone = "UPDATE alien SET telefon = '" + txtfPhoneInput.getText() + "' WHERE alien_id = '" + alienId + "'";
                idb.update(qPhone);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private void setPassword(String alienId) {
        try {
            if (Validation.validationTxtNrOfChar(txtfPwInput, lblMessageChange, 6, "Lösenordet får max vara 6 tecken")) {
                String qPassword = "UPDATE alien SET losenord = '" + txtfPwInput.getText() + "' WHERE alien_id = '" + alienId + "'";
                idb.update(qPassword);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setLocation(String alienId) {
        try {
            String qLocationId = "SElECT plats_id from plats WHERE benamning = '" + cbListLocations.getSelectedItem() + "'";
            String locationId = idb.fetchSingle(qLocationId);

            String qLocation = "Update alien SET plats ='" + locationId + "' WHERE alien_id = '" + alienId + "'";
            idb.update(qLocation);
            correctValues();

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private void setAgent(String alienId) {
        try {
            String agentListItem = cbListAgents.getSelectedItem().toString();
            String agentId = StringUtils.substringBetween(agentListItem, "(", ")");

            String qAgent = "Update alien SET ansvarig_agent  ='" + agentId + "' WHERE alien_id = '" + alienId + "'";
            idb.update(qAgent);
            correctValues();

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private void setBoglodite(String alienId) {

        String currentRace = Alien.getRace(alienId);
        try {
            showText();
            lblRaceSpecial.setText("Ange antal boogies: ");
            if (txtfRaceSpecial.getText().isEmpty()) {
                lblMessageChange.setText("Rutan för ras-specialitet är tom");
//  
            } else {
                if (currentRace != "") {
                    String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                    idb.delete(qDelete);
                }
                if (Validation.validationNumbers(txtfRaceSpecial, lblMessageChange, "Antal boogies måste anges i siffror")) {
                    String qBoglodite = "INSERT INTO Boglodite VALUES (" + alienId + "," + txtfRaceSpecial.getText() + ")";
                    idb.insert(qBoglodite);
                    correctValues();
                }
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setSquid(String alienId) {
        String currentRace = Alien.getRace(alienId);
        try {

            showText();
            lblRaceSpecial.setText("Ange antal armar:");
            if (txtfRaceSpecial.getText().isEmpty()) {
                lblMessageChange.setText("Rutan för ras-specialitet är tom");

            } else {
                if (currentRace != "") {
                    String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                    idb.delete(qDelete);
                }
                if (Validation.validationNumbers(txtfRaceSpecial, lblMessageChange, "Antal armar måste anges i siffror")) {
                    String qSquid = "INSERT INTO Squid VALUES (" + alienId + "," + txtfRaceSpecial.getText() + ")";
                    idb.insert(qSquid);
                    correctValues();
                }
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setWorm(String alienId) {
        String currentRace = Alien.getRace(alienId);
        try {

            if (currentRace != "") {
                String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                idb.delete(qDelete);
            }
            String qWorm = "INSERT INTO Worm VALUES (" + alienId + ")";
            idb.insert(qWorm);
            correctValues();

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setUnidentified(String alienId) {
        String currentRace = Alien.getRace(alienId);
        try {
            if (currentRace != "<Oidentifierad>") {
                String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                idb.delete(qDelete);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private String getAlienId() {
        String alienId = "";
        try {
            String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfAlienInputDelete.getText() + "' OR alien_id = '" + txtfAlienInputDelete.getText() + "'";
            String resultAlienId = idb.fetchSingle(qAlienId);
            if (resultAlienId != null) {
                alienId = resultAlienId;
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return alienId;
    }

    private int checkInput() {
        int loops = 0;
        try {
            String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfAlienInputDelete.getText() + "' OR alien_id = '" + txtfAlienInputDelete.getText() + "'";
            ArrayList<String> alienIdList = idb.fetchColumn(qAlienId);

            for (String element : alienIdList) {
                loops++;
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return loops;

    }

    private void deleteSquid() {
        String alienId = getAlienId();
        try {
            String qAlien = "DELETE FROM alien WHERE alien_id = '" + alienId + "'";
            idb.delete(qAlien);
            String qSquid = "DELETE FROM squid WHERE alien_id = '" + alienId + "'";
            idb.delete(qSquid);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void deleteBoglodite() {
        String alienId = getAlienId();
        try {
            String qAlien = "DELETE FROM alien WHERE alien_id = '" + alienId + "'";
            idb.delete(qAlien);
            String qBoglodite = "DELETE FROM boglodite WHERE alien_id = '" + alienId + "'";
            idb.delete(qBoglodite);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void deleteWorm() {
        String alienId = getAlienId();
        try {
            String qAlien = "DELETE FROM alien WHERE alien_id = '" + alienId + "'";
            idb.delete(qAlien);
            String qWorm = "DELETE FROM worm WHERE alien_id = '" + alienId + "'";
            idb.delete(qWorm);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void deleteUnidentified() {
        String alienId = getAlienId();
        try {
            String qAlien = "DELETE FROM alien WHERE alien_id = '" + alienId + "'";
            idb.delete(qAlien);

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }
    private void cbListRaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListRaceActionPerformed
        if (cbListRace.getSelectedItem().equals("Squid")) {
            showText();
            lblRaceSpecial.setText("Ange antal armar:");
        } else if (cbListRace.getSelectedItem().equals("Boglodite")) {
            showText();
            lblRaceSpecial.setText("Ange antal boogies:");
        } else {
            hideText();
        }
    }//GEN-LAST:event_cbListRaceActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        lblMessageInfo.setText(" ");
        lblMessageInput.setText(" ");
        lblMessageChange.setText(" ");
        lblMessageDelete.setText(" ");
        lblMessageChange.setForeground(new Color(255,50,50));
        int loops = 0;

        if (Validation.validationTxt(txtfAlienInputChange, lblMessageInput, "Ange aliennamn eller id")) {
            if (txtfNameInput.getText().isEmpty() && txtfPhoneInput.getText().isEmpty()
                    && txtfPwInput.getText().isEmpty()
                    && cbListLocations.getSelectedItem().equals("-----")
                    && cbListAgents.getSelectedItem().equals("-----")
                    && cbListRace.getSelectedItem().equals("-----")) {
                lblMessageChange.setText("Välj minst en ruta att uppdatera för den valda alien");
            } else {
                //Lägg till metodanrop som hämtar id och gör kollen för "flera med samma namn" istället. 
                try {
                    String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfAlienInputChange.getText() + "' OR alien_id = '" + txtfAlienInputChange.getText() + "'";
                    ArrayList<String> alienIdList = idb.fetchColumn(qAlienId);
                    String alienId = idb.fetchSingle(qAlienId);

                    for (String element : alienIdList) {
                        loops++;
                    }

                    if (loops > 1) {
                        lblMessageInput.setText("Det finns mer än en alien med detta namn, var vänligen ange ID");

                    } else if (alienId == null) {
                        lblMessageChange.setText("Alien namnet finns inte registrerat");

                    } else {

                        if (!txtfNameInput.getText().isEmpty()) {
                            setAlienName(alienId);
                        }
                        if (!txtfPhoneInput.getText().isEmpty()) {
                            setPhone(alienId);
                        }
                        if (!txtfPwInput.getText().isEmpty()) {
                            setPassword(alienId);
                        }
                        if (!cbListLocations.getSelectedItem().equals("-----")) {
                            setLocation(alienId);
                        }
                        if (!cbListAgents.getSelectedItem().equals("-----")) {
                            setAgent(alienId);
                        }
                        if (!cbListRace.getSelectedItem().equals("-----")) {

                            String currentRace = Alien.getRace(alienId);

                            if (currentRace.equals(cbListRace.getSelectedItem())) {
                                lblMessageChange.setText("Alien är redan registrerad som den här rasen.");
                            } else {

                                if (cbListRace.getSelectedItem().equals("Boglodite")) {
                                    setBoglodite(alienId);
                                } else if (cbListRace.getSelectedItem().equals("Squid")) {
                                    setSquid(alienId);
                                } else if (cbListRace.getSelectedItem().equals("Worm")) {
                                    setWorm(alienId);
                                } else if (cbListRace.getSelectedItem().equals("<Oidentifierad>")) {
                                    setUnidentified(alienId);
                                }
                            }
                        }
                    }

                } catch (InfException ex) {
                    System.out.println("Databasfel" + ex.getMessage());
                } catch (Exception ex) {
                    System.out.println("Random fel" + ex.getMessage());
                }

            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        lblMessageInfo.setText(" ");
        lblMessageInput.setText(" ");
        lblMessageChange.setText(" ");
        lblMessageDelete.setText(" ");
        lblMessageDelete.setForeground(new Color(255,50,50));

        if (Validation.validationTxt(txtfAlienInputDelete, lblMessageDelete, "Ange aliennamn eller id")) {
            if (checkInput() > 1) {
                lblMessageDelete.setText("Det finns mer än en alien med detta namn, vänligen ange ID");

            } else if (getAlienId().equals("")) {
                lblMessageDelete.setText("Alien namnet eller id:t finns inte registrerat");

            } else {
                String race = Alien.getRace(getAlienId());
                if (race.equals("Squid")) {
                    deleteSquid();
                } else if (race.equals("Boglodite")) {
                    deleteBoglodite();
                } else if (race.equals("Worm")) {
                    deleteWorm();
                } else if (race.equals("<Oidentifierad>")) {
                    deleteUnidentified();
                }

                lblMessageDelete.setForeground(new Color(50,255,50));
                lblMessageDelete.setText("Alien har tagits bort!");

            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnShowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInfoActionPerformed
        txtaPrintAlienInfo.setText("");
        lblMessageInfo.setText(" ");
        lblMessageInput.setText(" ");
        lblMessageChange.setText(" ");
        lblMessageDelete.setText(" ");
        
        //Även här använda sig av färdiga metoderna för "getId" och "checkInput".
        if (Validation.validationTxt(txtfShowAlienInput, lblMessageInfo, "Ange aliennamn eller id")) {
            try {
                String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfShowAlienInput.getText() + "' OR alien_id = '" + txtfShowAlienInput.getText() + "'";
                String alienId = idb.fetchSingle(qAlienId);

                if (alienId == null) {
                    lblMessageInfo.setText("Alien namnet finns inte registrerat");
                } else {
                    txtaPrintAlienInfo.append("Alien id:\t" + alienId + "\n");

                    String qAlienInfo = "SELECT namn, telefon, registreringsdatum FROM alien WHERE alien_id = '" + alienId + "'";
                    HashMap<String, String> alienInfo = idb.fetchRow(qAlienInfo);
                    txtaPrintAlienInfo.append("Namn:\t" + alienInfo.get("namn") + "\n");
                    txtaPrintAlienInfo.append("Telefon:\t" + alienInfo.get("telefon") + "\n");
                    txtaPrintAlienInfo.append("Registrerad:\t" + alienInfo.get("registreringsdatum") + "\n");

                    String qAlienPlats = "SELECT benamning FROM plats p JOIN alien a ON p.plats_id = a.plats WHERE alien_id = '" + alienId + "'";
                    String alienPlats = idb.fetchSingle(qAlienPlats);
                    String qAlienOmrade = "SELECT o.benamning FROM omrade o JOIN plats p ON o.omrades_id = p.finns_i WHERE p.benamning = '" + alienPlats + "'";
                    String alienOmrade = idb.fetchSingle(qAlienOmrade);
                    txtaPrintAlienInfo.append("Befinner sig:\t" + alienPlats + " (" + alienOmrade + ")" + "\n");

                    String qAlienKontakt = "SELECT ag.namn FROM agent ag JOIN alien al ON ag.agent_id = al.ansvarig_agent WHERE alien_id = '" + alienId + "'";
                    String alienKontakt = idb.fetchSingle(qAlienKontakt);
                    txtaPrintAlienInfo.append("Kontakt:\t" + alienKontakt + "\n");

                    String ras = Alien.getRace(alienId);
                    txtaPrintAlienInfo.append("Ras:\t" + ras + "\n");

                    String alienEgenskap = "";
                    if (ras.equals("Squid")) {
                        String qAlienSquid = "SELECT antal_armar FROM squid WHERE alien_id = '" + alienId + "'";
                        alienEgenskap = idb.fetchSingle(qAlienSquid);
                        txtaPrintAlienInfo.append("Egenskap:\t" + alienEgenskap + " st armar\n");
                    } else if (ras.equals("Boglodite")) {
                        String qAlienBoglodite = "SELECT antal_boogies FROM boglodite WHERE alien_id = '" + alienId + "'";
                        alienEgenskap = idb.fetchSingle(qAlienBoglodite);
                        txtaPrintAlienInfo.append("Egenskap:\t" + alienEgenskap + " st boogies\n");
                    }

                }
            } catch (InfException ex) {
                System.out.println("Databasfel" + ex.getMessage());
            } catch (Exception ex) {
                System.out.println("Random fel" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnShowInfoActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        //dispose();
    }//GEN-LAST:event_btnMenuActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnShowInfo;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbListAgents;
    private javax.swing.JComboBox<String> cbListLocations;
    private javax.swing.JComboBox<String> cbListRace;
    private javax.swing.JPanel jpBackground;
    private javax.swing.JScrollPane jsPrintInfo;
    private javax.swing.JLabel lblAgent;
    private javax.swing.JLabel lblAlienName;
    private javax.swing.JLabel lblAlienPhone;
    private javax.swing.JLabel lblAlienRace;
    private javax.swing.JLabel lblDeleteAlien;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblMessageChange;
    private javax.swing.JLabel lblMessageDelete;
    private javax.swing.JLabel lblMessageInfo;
    private javax.swing.JLabel lblMessageInput;
    private javax.swing.JLabel lblPw;
    private javax.swing.JLabel lblRaceSpecial;
    private javax.swing.JLabel lblShowInfoAlien;
    private javax.swing.JLabel lblTitelUpdate;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitleDelete;
    private javax.swing.JLabel lblTitleShowInfo;
    private javax.swing.JLabel lblUpdateAlien;
    private javax.swing.JTextArea txtaPrintAlienInfo;
    private javax.swing.JTextField txtfAlienInputChange;
    private javax.swing.JTextField txtfAlienInputDelete;
    private javax.swing.JTextField txtfNameInput;
    private javax.swing.JTextField txtfPhoneInput;
    private javax.swing.JTextField txtfPwInput;
    private javax.swing.JTextField txtfRaceSpecial;
    private javax.swing.JTextField txtfShowAlienInput;
    // End of variables declaration//GEN-END:variables
}
