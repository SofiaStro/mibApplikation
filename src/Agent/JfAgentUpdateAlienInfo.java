/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Agent;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import mibapplikation.ValidationRace;
import mibapplikation.Validation;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author strom
 */
public class JfAgentUpdateAlienInfo extends javax.swing.JFrame {

    private InfDB idb;

    /**
     * Creates new form WindowAlienChangePw
     */
    public JfAgentUpdateAlienInfo(InfDB idb) {
        initComponents();
        this.idb = idb;
        txtaPrintAlienInfo.setEditable(false);
        hideText();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpBackground = new javax.swing.JPanel();
        lblTitel = new javax.swing.JLabel();
        lblMessageUpdate = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        lblAlienUpdate = new javax.swing.JLabel();
        txtfUpdatePhone = new javax.swing.JTextField();
        lblUpdateName = new javax.swing.JLabel();
        lblUpdatePhone = new javax.swing.JLabel();
        lblUpdateRace = new javax.swing.JLabel();
        cbListRace = new javax.swing.JComboBox<>();
        txtfUpdateName = new javax.swing.JTextField();
        txtfAlienUpdate = new javax.swing.JTextField();
        lblMessageInfo = new javax.swing.JLabel();
        txtfRaceSpecial = new javax.swing.JTextField();
        lblRaceSpecial = new javax.swing.JLabel();
        btnShowInfo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaPrintAlienInfo = new javax.swing.JTextArea();
        lblAlienInfo = new javax.swing.JLabel();
        txtfAlienInfo = new javax.swing.JTextField();
        lblTitleUpdate = new javax.swing.JLabel();
        lblTitleInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Galaxal");
        setBackground(new java.awt.Color(255, 255, 255));
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Icons/astronomy.png")).getImage());
        setLocationByPlatform(true);
        setResizable(false);

        jpBackground.setBackground(new java.awt.Color(40, 40, 40));
        jpBackground.setForeground(new java.awt.Color(40, 40, 40));

        lblTitel.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lblTitel.setForeground(new java.awt.Color(255, 255, 255));
        lblTitel.setText("Se och ändra information om en alien");

        lblMessageUpdate.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageUpdate.setForeground(new java.awt.Color(255, 50, 50));
        lblMessageUpdate.setText(" ");

        btnUpdate.setText("UPPDATERA");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnMenu.setText("MENY");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        lblAlienUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblAlienUpdate.setText("Ange aliens namn eller id:");

        txtfUpdatePhone.setColumns(6);

        lblUpdateName.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateName.setText("Uppdatera namn:");

        lblUpdatePhone.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdatePhone.setText("Uppdatera telefonnummer:");

        lblUpdateRace.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdateRace.setText("Uppdatera rastillhörighet:");

        cbListRace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "Boglodite", "Squid", "Worm", "<Oidentifierad>" }));
        cbListRace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbListRaceActionPerformed(evt);
            }
        });

        txtfUpdateName.setColumns(6);

        txtfAlienUpdate.setColumns(6);

        lblMessageInfo.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessageInfo.setForeground(new java.awt.Color(255, 50, 50));
        lblMessageInfo.setText(" ");

        lblRaceSpecial.setForeground(new java.awt.Color(255, 255, 255));
        lblRaceSpecial.setText("xxxx");

        btnShowInfo.setText("VISA INFO");
        btnShowInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInfoActionPerformed(evt);
            }
        });

        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setRequestFocusEnabled(false);

        txtaPrintAlienInfo.setBackground(new java.awt.Color(79, 79, 79));
        txtaPrintAlienInfo.setColumns(20);
        txtaPrintAlienInfo.setForeground(new java.awt.Color(255, 255, 255));
        txtaPrintAlienInfo.setRows(5);
        txtaPrintAlienInfo.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtaPrintAlienInfo.setEnabled(false);
        txtaPrintAlienInfo.setSelectedTextColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(txtaPrintAlienInfo);

        lblAlienInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblAlienInfo.setText("Ange aliens namn eller id:");

        txtfAlienInfo.setColumns(6);

        lblTitleUpdate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleUpdate.setText("Uppdatera information");

        lblTitleInfo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTitleInfo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitleInfo.setText("Visa information");

        javax.swing.GroupLayout jpBackgroundLayout = new javax.swing.GroupLayout(jpBackground);
        jpBackground.setLayout(jpBackgroundLayout);
        jpBackgroundLayout.setHorizontalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBackgroundLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblUpdateRace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblRaceSpecial)
                                    .addComponent(lblUpdatePhone, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cbListRace, javax.swing.GroupLayout.Alignment.LEADING, 0, 134, Short.MAX_VALUE)
                                    .addComponent(txtfRaceSpecial, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtfUpdatePhone, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtfUpdateName, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(49, 49, 49))
                            .addGroup(jpBackgroundLayout.createSequentialGroup()
                                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                                        .addComponent(lblAlienInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnShowInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                                            .addComponent(txtfAlienInfo)))
                                    .addComponent(lblUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                                        .addComponent(lblAlienUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtfAlienUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblTitleUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblTitleInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(lblMessageInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2731, 2731, 2731))
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTitel, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMenu))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMessageUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2912, 2912, 2912))
        );
        jpBackgroundLayout.setVerticalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(lblTitel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblTitleInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jpBackgroundLayout.createSequentialGroup()
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAlienInfo)
                            .addComponent(txtfAlienInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnShowInfo)
                        .addGap(2, 2, 2)
                        .addComponent(lblMessageInfo)
                        .addGap(18, 18, 18)
                        .addComponent(lblTitleUpdate)
                        .addGap(12, 12, 12)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAlienUpdate)
                            .addComponent(txtfAlienUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfUpdateName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfUpdatePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblUpdatePhone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUpdateRace, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbListRace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRaceSpecial)
                            .addComponent(txtfRaceSpecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnUpdate))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblMessageUpdate)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(btnMenu)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.PREFERRED_SIZE, 661, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnShowInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInfoActionPerformed
        txtaPrintAlienInfo.setText("");
        lblMessageUpdate.setText(" ");
        lblMessageInfo.setText(" ");
        lblMessageInfo.setForeground(new Color(255, 50, 50));
        int loops = 0;

        if (Validation.validationTxt(txtfAlienInfo, lblMessageInfo, "Ange aliennamn eller id")) {
            try {
                String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfAlienInfo.getText() + "' OR alien_id = '" + txtfAlienInfo.getText() + "'";
                ArrayList<String> alienIdList = idb.fetchColumn(qAlienId);
                String alienId = idb.fetchSingle(qAlienId);

                for (String element : alienIdList) {
                    loops++;
                }
                if (loops > 1) {
                    lblMessageInfo.setText("Det finns mer än en alien med detta namn, var vänligen ange ID");
                } else if (alienId == null) {
                    lblMessageInfo.setText("Alien namet finns inte registrerat");
                } else {
                    txtaPrintAlienInfo.append("Alien id:\t" + alienId + "\n");

                    String qAlienInfo = "SELECT namn, telefon, registreringsdatum FROM alien WHERE alien_id = '" + alienId + "'";
                    HashMap<String, String> alienInfo = idb.fetchRow(qAlienInfo);
                    txtaPrintAlienInfo.append("Namn:\t" + alienInfo.get("namn") + "\n");
                    txtaPrintAlienInfo.append("Telefon:\t" + alienInfo.get("telefon") + "\n");
                    txtaPrintAlienInfo.append("Registrerad:\t" + alienInfo.get("registreringsdatum") + "\n");

                    String qAlienPlats = "SELECT benamning FROM plats p JOIN alien a ON p.plats_id = a.plats WHERE alien_id = '" + alienId + "'";
                    String alienPlats = idb.fetchSingle(qAlienPlats);
                    String qAlienOmrade = "SELECT o.benamning FROM omrade o JOIN plats p ON o.omrades_id = p.finns_i WHERE p.benamning = '" + alienPlats + "'";
                    String alienOmrade = idb.fetchSingle(qAlienOmrade);
                    txtaPrintAlienInfo.append("Befinner sig:\t" + alienPlats + " (" + alienOmrade + ")" + "\n");

                    String qAlienKontakt = "SELECT ag.namn FROM agent ag JOIN alien al ON ag.agent_id = al.ansvarig_agent WHERE alien_id = '" + alienId + "'";
                    String alienKontakt = idb.fetchSingle(qAlienKontakt);
                    txtaPrintAlienInfo.append("Kontakt:\t" + alienKontakt + "\n");

                    String ras = ValidationRace.getRace(alienId);
                    txtaPrintAlienInfo.append("Ras:\t" + ras + "\n");

                    String alienEgenskap = "";
                    if (ras.equals("Squid")) {
                        String qAlienSquid = "SELECT antal_armar FROM squid WHERE alien_id = '" + alienId + "'";
                        alienEgenskap = idb.fetchSingle(qAlienSquid);
                        txtaPrintAlienInfo.append("Egenskap:\t" + alienEgenskap + " st armar\n");
                    } else if (ras.equals("Boglodite")) {
                        String qAlienBoglodite = "SELECT antal_boogies FROM boglodite WHERE alien_id = '" + alienId + "'";
                        alienEgenskap = idb.fetchSingle(qAlienBoglodite);
                        txtaPrintAlienInfo.append("Egenskap:\t" + alienEgenskap + " st boogies\n");
                    }

                }
            } catch (InfException ex) {
                System.out.println("Databasfel" + ex.getMessage());
            } catch (Exception ex) {
                System.out.println("Random fel" + ex.getMessage());
            }

        }


    }//GEN-LAST:event_btnShowInfoActionPerformed

    private void cbListRaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbListRaceActionPerformed
        if (cbListRace.getSelectedItem().equals("Squid")) {
            showText();
            lblRaceSpecial.setText("Ange antal armar:");
        } else if (cbListRace.getSelectedItem().equals("Boglodite")) {
            showText();
            lblRaceSpecial.setText("Ange antal boogies:");
        } else {
            hideText();
        }

    }//GEN-LAST:event_cbListRaceActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        lblMessageInfo.setText(" ");
        lblMessageUpdate.setText(" ");
        lblMessageUpdate.setForeground(new Color(255, 50, 50));
        int loops = 0;

        if (Validation.validationTxt(txtfAlienUpdate, lblMessageUpdate, "Ange aliennamn eller id")) {
            if (txtfUpdateName.getText().isEmpty() && txtfUpdatePhone.getText().isEmpty()
                    && cbListRace.getSelectedItem().equals("-----")) {
                lblMessageUpdate.setText("Välj minst en ruta att uppdatera för den valda alien");
            } else {
                try {
                    String qAlienId = "SELECT alien_id FROM alien WHERE namn = '" + txtfAlienUpdate.getText() + "' OR alien_id = '" + txtfAlienUpdate.getText() + "'";
                    ArrayList<String> alienIdList = idb.fetchColumn(qAlienId);
                    String alienId = idb.fetchSingle(qAlienId);

                    for (String element : alienIdList) {
                        loops++;
                    }
                    if (loops > 1) {
                        lblMessageUpdate.setText("Det finns mer än en alien med detta namn, var vänligen ange ID");

                    } else if (alienId == null) {
                        lblMessageUpdate.setText("Alien namnet finns inte registrerat");

                    } else {

                        if (!txtfUpdateName.getText().isEmpty()) {
                            setAlienName(alienId);
                        }
                        if (!txtfUpdatePhone.getText().isEmpty()) {
                            setPhone(alienId);
                        }
                        if (!cbListRace.getSelectedItem().equals("-----")) {

                            String currentRace = ValidationRace.getRace(alienId);

                            if (currentRace.equals(cbListRace.getSelectedItem())) {
                                lblMessageUpdate.setText("Alien är redan registrerad som den här rasen.");
                            } else {

                                if (cbListRace.getSelectedItem().equals("Boglodite")) {
                                    setBoglodite(alienId);
                                } else if (cbListRace.getSelectedItem().equals("Squid")) {
                                    setSquid(alienId);
                                } else if (cbListRace.getSelectedItem().equals("Worm")) {
                                    setWorm(alienId);
                                } else if (cbListRace.getSelectedItem().equals("<Oidentifierad>")) {
                                    setUnidentified(alienId);
                                }
                            }
                        }
                        txtfAlienInfo.setText(alienId);
                        btnShowInfo.doClick();

                    }

                } catch (InfException ex) {
                    System.out.println("Databasfel" + ex.getMessage());
                } catch (Exception ex) {
                    System.out.println("Random fel" + ex.getMessage());
                }

            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void hideText() {
        lblRaceSpecial.setVisible(false);
        txtfRaceSpecial.setVisible(false);
    }

    private void showText() {
        lblRaceSpecial.setVisible(true);
        txtfRaceSpecial.setVisible(true);
    }

    private void correctValues() {

        lblMessageUpdate.setForeground(new Color(50, 255, 50));
        lblMessageUpdate.setText("Dina ändringar är sparade");

    }

    private void setAlienName(String alienId) {

        try {
            if (Validation.validationTxtNrOfChar(txtfUpdateName, lblMessageUpdate, 20, "Namnet får vara max 20 tecken")) {
                String qName = "UPDATE alien SET namn = '" + txtfUpdateName.getText() + "' WHERE alien_id = '" + alienId + "'";
                idb.update(qName);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setPhone(String alienId) {
        try {
            if (Validation.validationTxtPhone(txtfUpdatePhone, lblMessageUpdate)) {
                String qPhone = "UPDATE alien SET telefon = '" + txtfUpdatePhone.getText() + "' WHERE alien_id = '" + alienId + "'";
                idb.update(qPhone);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private void setBoglodite(String alienId) {

        String currentRace = ValidationRace.getRace(alienId);
        try {
            showText();
            lblRaceSpecial.setText("Ange antal boogies: ");
            if (txtfRaceSpecial.getText().isEmpty()) {
                lblMessageUpdate.setText("Rutan för ras-specialitet är tom");

            } else {
                if (!currentRace.equals("<Oidentifierad>")) {
                    String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                    idb.delete(qDelete);
                }
                if (Validation.validationNumbers(txtfRaceSpecial, lblMessageUpdate, "Antal boogies måste anges i siffror")) {
                    String qBoglodite = "INSERT INTO Boglodite VALUES (" + alienId + "," + txtfRaceSpecial.getText() + ")";
                    idb.insert(qBoglodite);
                    correctValues();
                }
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setSquid(String alienId) {
        String currentRace = ValidationRace.getRace(alienId);
        try {

            showText();
            lblRaceSpecial.setText("Ange antal armar:");
            if (txtfRaceSpecial.getText().isEmpty()) {
                lblMessageUpdate.setText("Rutan för ras-specialitet är tom");

            } else {
                if (!currentRace.equals("<Oidentifierad>")) {
                    String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                    idb.delete(qDelete);
                }
                if (Validation.validationNumbers(txtfRaceSpecial, lblMessageUpdate, "Antal armar måste anges i siffror")) {
                    String qSquid = "INSERT INTO Squid VALUES (" + alienId + "," + txtfRaceSpecial.getText() + ")";
                    idb.insert(qSquid);
                    correctValues();
                }
            }

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setUnidentified(String alienId) {
        String currentRace = ValidationRace.getRace(alienId);
        try {
            if (!currentRace.equals("<Oidentifierad>")) {
                String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                idb.delete(qDelete);
                correctValues();
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }

    }

    private void setWorm(String alienId) {
        String currentRace = ValidationRace.getRace(alienId);
        try {

            if (!currentRace.equals("<Oidentifierad>")) {
                String qDelete = "DELETE FROM " + currentRace + " WHERE alien_id = '" + alienId + "'";
                idb.delete(qDelete);
            }
            String qWorm = "INSERT INTO Worm VALUES (" + alienId + ")";
            idb.insert(qWorm);
            correctValues();

        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnShowInfo;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbListRace;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpBackground;
    private javax.swing.JLabel lblAlienInfo;
    private javax.swing.JLabel lblAlienUpdate;
    private javax.swing.JLabel lblMessageInfo;
    private javax.swing.JLabel lblMessageUpdate;
    private javax.swing.JLabel lblRaceSpecial;
    private javax.swing.JLabel lblTitel;
    private javax.swing.JLabel lblTitleInfo;
    private javax.swing.JLabel lblTitleUpdate;
    private javax.swing.JLabel lblUpdateName;
    private javax.swing.JLabel lblUpdatePhone;
    private javax.swing.JLabel lblUpdateRace;
    private javax.swing.JTextArea txtaPrintAlienInfo;
    private javax.swing.JTextField txtfAlienInfo;
    private javax.swing.JTextField txtfAlienUpdate;
    private javax.swing.JTextField txtfRaceSpecial;
    private javax.swing.JTextField txtfUpdateName;
    private javax.swing.JTextField txtfUpdatePhone;
    // End of variables declaration//GEN-END:variables
}
