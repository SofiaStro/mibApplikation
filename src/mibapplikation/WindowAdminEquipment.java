/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mibapplikation;


import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *
 * @author strom
 */
public class WindowAdminEquipment extends javax.swing.JFrame {

    private InfDB idb;

    /**
     * Creates new form WindowAlienChangePw
     */
    public WindowAdminEquipment(InfDB idb) {
        initComponents();
        this.idb = idb;
        printEquipmentList();
        setEquipmentList();
        txtfEquipCapacity.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnMenu = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtaListEquipment = new javax.swing.JTextArea();
        txtfEquipName = new javax.swing.JTextField();
        cbListEquipment = new javax.swing.JComboBox<>();
        btnDelete = new javax.swing.JButton();
        lblListDescription = new javax.swing.JLabel();
        cbEquipCategory = new javax.swing.JComboBox<>();
        lblAddEquip = new javax.swing.JLabel();
        lblEquipName = new javax.swing.JLabel();
        lblEquipCategory = new javax.swing.JLabel();
        txtfEquipCapacity = new javax.swing.JTextField();
        lblDeleteEquip = new javax.swing.JLabel();
        lblEquipCapacity = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Galaxal");
        setLocationByPlatform(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(40, 40, 40));

        lblTitle.setFont(new java.awt.Font("Segoe UI", 1, 22)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Hantera utrustning");

        lblMessage.setFont(new java.awt.Font("Segoe UI", 0, 11)); // NOI18N
        lblMessage.setForeground(new java.awt.Color(255, 96, 96));
        lblMessage.setText(" ");

        btnSave.setText("LÄGG TILL");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnMenu.setText("MENY");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        txtaListEquipment.setBackground(new java.awt.Color(79, 79, 79));
        txtaListEquipment.setColumns(20);
        txtaListEquipment.setForeground(new java.awt.Color(255, 255, 255));
        txtaListEquipment.setRows(5);
        txtaListEquipment.setFocusable(false);
        jScrollPane1.setViewportView(txtaListEquipment);

        txtfEquipName.setColumns(6);

        btnDelete.setText("TA BORT");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblListDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblListDescription.setText("Följande utrustning finns registrerad");

        cbEquipCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "Vapen", "Teknik", "Kommunikation" }));
        cbEquipCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEquipCategoryActionPerformed(evt);
            }
        });

        lblAddEquip.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblAddEquip.setForeground(new java.awt.Color(255, 255, 255));
        lblAddEquip.setText("Lägg till utrustning");

        lblEquipName.setForeground(new java.awt.Color(255, 255, 255));
        lblEquipName.setText("Namn:");

        lblEquipCategory.setForeground(new java.awt.Color(255, 255, 255));
        lblEquipCategory.setText("Kategori:");

        txtfEquipCapacity.setColumns(5);

        lblDeleteEquip.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblDeleteEquip.setForeground(new java.awt.Color(255, 255, 255));
        lblDeleteEquip.setText("Ta bort utrustning");

        lblEquipCapacity.setForeground(new java.awt.Color(255, 255, 255));
        lblEquipCapacity.setText(" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblEquipName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEquipCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblEquipCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtfEquipName)
                                    .addComponent(txtfEquipCapacity)
                                    .addComponent(cbEquipCategory, 0, 148, Short.MAX_VALUE)))
                            .addComponent(cbListEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDeleteEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnMenu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblListDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblAddEquip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfEquipName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEquipName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbEquipCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEquipCategory))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfEquipCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEquipCapacity))
                        .addGap(24, 24, 24)
                        .addComponent(btnSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(lblDeleteEquip)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbListEquipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane1))
                .addGap(27, 27, 27)
                .addComponent(lblMessage)
                .addGap(20, 20, 20)
                .addComponent(btnMenu)
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printEquipmentList() {
        txtaListEquipment.setText("");
        
        try {
            String query = "SELECT utrustnings_id, benamning FROM utrustning";
            ArrayList<HashMap<String, String>> result = idb.fetchRows(query);
            
            for (HashMap<String, String> element : result) {
                String equipmentType = Equipment.getEquipmentType(element.get("utrustnings_id"));
                txtaListEquipment.append(" • " + element.get("benamning") + " (" + equipmentType + ")\n");
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }

    private void setEquipmentList() {
        cbListEquipment.removeAllItems();
        cbListEquipment.addItem("-----");
        
        try {
            String query = "SELECT benamning FROM utrustning";
            ArrayList<String> result = idb.fetchColumn(query);
            
            for (String element : result) {
                cbListEquipment.addItem(element);
            }
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
    }
    
    private String getNewEquipmentId() {
        int lastNr = 0;
        String newId = "";
        
        try {            
            String query = "SELECT utrustnings_id FROM utrustning";
            ArrayList<String> result = idb.fetchColumn(query);
            int[] intResult = new int[result.size()];
            
            for (int i = 0; i < result.size(); i++) {
                intResult[i] = Integer.parseInt(result.get(i));
            }
            for (int element : intResult) {
                if (element >= lastNr) {
                    lastNr = element;
                }
            }
            int newIdInt = lastNr + 1;
            newId = String.valueOf(newIdInt);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return newId;
    }
    
    private String getEquipmentName() {
        String equipmentName = txtfEquipName.getText();
        return equipmentName;
    }
    
    private void addWeaponEquipment() {
        String newId = getNewEquipmentId();
        try {
            String queryAddEquip = "INSERT INTO utrustning(utrustnings_id, benamning) VALUES ('" + newId + "','" + getEquipmentName() + "')";
            idb.insert(queryAddEquip);
            
            String queryAddWeaponCapacity = "INSERT INTO vapen(utrustnings_id, kaliber) VALUES ('" + newId + "','" + txtfEquipCapacity.getText() + "')";
            idb.insert(queryAddWeaponCapacity);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }

    private void addTechEquipment() {
        String newId = getNewEquipmentId();
        try {
            String queryAddEquip = "INSERT INTO utrustning(utrustnings_id, benamning) VALUES ('" + newId + "','" + getEquipmentName() + "')";
            idb.insert(queryAddEquip);
            
            String queryAddWeaponCapacity = "INSERT INTO teknik (utrustnings_id, kraftkalla) VALUES ('" + newId + "','" + txtfEquipCapacity.getText() + "')";
            idb.insert(queryAddWeaponCapacity);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }

    private void addCommsEquipment() {
        String newId = getNewEquipmentId();
        try {
            String queryAddEquip = "INSERT INTO utrustning(utrustnings_id, benamning) VALUES ('" + newId + "','" + getEquipmentName() + "')";
            idb.insert(queryAddEquip);
            
            String queryAddWeaponCapacity = "INSERT INTO kommunikation (utrustnings_id, overforingsteknik) VALUES ('" + newId + "','" + txtfEquipCapacity.getText() + "')";
            idb.insert(queryAddWeaponCapacity);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }

    private String getEquipmentId() {
        String equipmentId = "";
        try {
            String query = "SELECT utrustnings_id FROM utrustning WHERE benamning = '" + cbListEquipment.getSelectedItem() + "'";
            String result = idb.fetchSingle(query);
            equipmentId = result;
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        return equipmentId;
    }
    
    private void deleteWeaponEquipment() {
        
        try {
            String equipmentId = getEquipmentId();
            
            String queryEquipment = "DELETE FROM utrustning WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryEquipment);
            String queryWeapon = "DELETE FROM vapen WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryWeapon);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }

    private void deleteTechEquipment() {
        try {
            String equipmentId = getEquipmentId();
            String queryEquipment = "DELETE FROM utrustning WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryEquipment);
            String queryTech = "DELETE FROM teknik WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryTech);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }

    private void deleteCommsEquipment() {
        try {
            String equipmentId = getEquipmentId();
            String queryEquipment = "DELETE FROM utrustning WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryEquipment);
            String queryComms = "DELETE FROM kommunikation WHERE utrustnings_id = '" + equipmentId + "'";
            idb.delete(queryComms);
        } catch (InfException ex) {
            System.out.println("Databasfel" + ex.getMessage());
        } catch (Exception ex) {
            System.out.println("Random fel" + ex.getMessage());
        }
        
    }
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        lblMessage.setText(" ");
        lblMessage.setForeground(Color.RED);
        if (Validation.validationTxt(txtfEquipName, lblMessage, "Ange utrustningsnamn")
                && Validation.validationCb(cbEquipCategory, lblMessage)
                && Validation.validationTxt(txtfEquipCapacity, lblMessage, "")) {
            try {
                Boolean equipmentExist = false;
                Boolean equipmentAdded = false;
                String newEquipment = txtfEquipName.getText();
                
                String query = "SELECT benamning FROM utrustning";
                ArrayList<String> result = idb.fetchColumn(query);
                
                for (String element : result) {
                    if (newEquipment.toLowerCase().equals(element.toLowerCase())) {
                        equipmentExist = true;
                    }
                }
                if (equipmentExist) {
                    lblMessage.setText("Utrustningen finns redan!");
                } else {
                     
                    if (cbEquipCategory.getSelectedItem().equals("Vapen") && Validation.validationNumbers(txtfEquipCapacity, lblMessage, "Kaliber måste vare en siffra!")) {
                        addWeaponEquipment();
                        equipmentAdded = true;
                    } else if (cbEquipCategory.getSelectedItem().equals("Teknik") && Validation.validationTxtNrOfChar(txtfEquipCapacity, lblMessage, 20, "Kraftkälla får max vara 20 tecken")) {
                        addTechEquipment();
                        equipmentAdded = true;
                    } else if (cbEquipCategory.getSelectedItem().equals("Kommunikation") && Validation.validationTxtNrOfChar(txtfEquipCapacity, lblMessage, 20, "Överföringsteknik får max vara 20 tecken")) {
                        addCommsEquipment();
                        equipmentAdded = true;
                    }
                    
                }
                if (equipmentAdded) {
                    lblMessage.setForeground(Color.GREEN);
                    lblMessage.setText("Utrustningen har lagts till!");
                    txtfEquipName.setText("");
                    cbEquipCategory.setSelectedIndex(0);
                    txtfEquipCapacity.setText("");
                    lblEquipCapacity.setText(" ");
                    printEquipmentList();
                    setEquipmentList();
                }
            } catch (InfException ex) {
                System.out.println("Databasfel" + ex.getMessage());
            } catch (Exception ex) {
                System.out.println("Random fel" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        //dispose();
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        lblMessage.setText(" ");
        lblMessage.setForeground(Color.RED);
        if (Validation.validationCb(cbListEquipment, lblMessage)) {
            
            try {
                String equipmentId = getEquipmentId();
                String query = "SELECT utrustnings_id FROM innehar_utrustning";
                ArrayList<String> result = idb.fetchColumn(query);
                
                for (String element : result) {
                    if (equipmentId.equals(element)) {
                        String qDeleteUsedEquip = "DELETE FROM innehar_utrustning WHERE utrustnings_id = '" + element + "'";
                        idb.delete(qDeleteUsedEquip);
                    }
                }
                
                String equipmentType = Equipment.getEquipmentType(equipmentId);
                if (equipmentType.equals("Vapen")) {
                    deleteWeaponEquipment();
                } else if (equipmentType.equals("Teknik")) {
                    deleteTechEquipment();
                } else if (equipmentType.equals("Kommunikation")) {
                    deleteCommsEquipment();
                }
                
                lblMessage.setForeground(Color.GREEN);
                lblMessage.setText("Utrustningen har tagits bort!");
                printEquipmentList();
                setEquipmentList();
                
            } catch (InfException ex) {
                System.out.println("Databasfel" + ex.getMessage());
            } catch (Exception ex) {
                System.out.println("Random fel" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cbEquipCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEquipCategoryActionPerformed
        // TODO add your handling code here:

        if (cbEquipCategory.getSelectedItem().equals("Vapen")) {
            txtfEquipCapacity.setVisible(true);
            lblEquipCapacity.setText("Kaliber:");
        } else if (cbEquipCategory.getSelectedItem().equals("Teknik")) {
            txtfEquipCapacity.setVisible(true);
            lblEquipCapacity.setText("Kraftkälla::");
        } else if (cbEquipCategory.getSelectedItem().equals("Kommunikation")) {
            txtfEquipCapacity.setVisible(true);
            lblEquipCapacity.setText("Överföringsteknik:");
        } else {
            txtfEquipCapacity.setVisible(false);
            lblEquipCapacity.setText(" ");
        }
        
    }//GEN-LAST:event_cbEquipCategoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMenu;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> cbEquipCategory;
    private javax.swing.JComboBox<String> cbListEquipment;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddEquip;
    private javax.swing.JLabel lblDeleteEquip;
    private javax.swing.JLabel lblEquipCapacity;
    private javax.swing.JLabel lblEquipCategory;
    private javax.swing.JLabel lblEquipName;
    private javax.swing.JLabel lblListDescription;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea txtaListEquipment;
    private javax.swing.JTextField txtfEquipCapacity;
    private javax.swing.JTextField txtfEquipName;
    // End of variables declaration//GEN-END:variables
}
